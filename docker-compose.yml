networks:
  cmm_network:
    driver: bridge

services:
  nginx:
    build:
      context: ./Backend/nginx
      dockerfile: Dockerfile
    container_name: NGINX
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - /opt/docker/certificados:/etc/ssl/cmm:ro
    networks:
      - cmm_network
    depends_on:
      frontend:
        condition: service_started
      api_nestjs:
        condition: service_started
      api_fastapi:
        condition: service_started
      postgresql:
        condition: service_started
      grafana:
        condition: service_started
      prometheus:
        condition: service_started
      loki:
        condition: service_started
    environment:
      - TZ=America/Manaus
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/health || wget -q -S --spider http://localhost/health || curl -fsSk https://localhost/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  api_nestjs:
    build:
      context: ./Backend/NestJS
      dockerfile: Dockerfile
    container_name: NESTJS
    restart: unless-stopped
    expose:
      - "3000"
    ports:
      - "3000:3000"
    networks:
      - cmm_network
    depends_on:
      postgresql:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      - NODE_ENV=production
      - PORT=3000
      - TZ=America/Manaus
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=AUTOMACAO
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4318/v1/traces
      - JWT_SECRET=dev-secret
      - ADMIN_USER=admin
      - ADMIN_PASS=admin
      - AUTO_RELOAD=false
      - KEYCLOAK_JWKS_URI=http://keycloak:8080/realms/automacao/protocol/openid-connect/certs
      - KEYCLOAK_ISSUER=http://keycloak:8080/realms/automacao
      - KEYCLOAK_AUDIENCE=automacao-frontend

  api_fastapi:
    build:
      context: ./Backend/FastAPI
      dockerfile: Dockerfile
    container_name: FASTAPI
    restart: unless-stopped
    expose:
      - "8000"
    ports:
      - "8001:8000"
    networks:
      - cmm_network
    environment:
      - TZ=America/Manaus
      - AUTO_RELOAD=false
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=AUTOMACAO
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || wget -q -S --spider http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: FRONTEND
    restart: unless-stopped
    networks:
      - cmm_network
    expose:
      - "80"
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
      - VITE_PROMETHEUS_URL=/prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/ || wget -q -S --spider http://localhost/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  postgresql:
    build:
      context: ./Backend/postgresql
      dockerfile: Dockerfile
    container_name: POSTGRESQL
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - cmm_network
    environment:
      - POSTGRES_DB=AUTOMACAO
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - TZ=America/Manaus
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d AUTOMACAO"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: PROMETHEUS
    restart: unless-stopped
    expose:
      - "9090"
    ports:
      - "9090:9090"
    volumes:
      - ./Backend/prometheus:/etc/prometheus:ro
    command: --config.file=/etc/prometheus/prometheus.yml
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9090/-/healthy || wget -q -S --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - cmm_network

  redis:
    image: redis:7-alpine
    container_name: REDIS
    restart: unless-stopped
    expose:
      - "6379"
    ports:
      - "6379:6379"
    networks:
      - cmm_network
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    environment:
      - TZ=America/Manaus
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: RABBITMQ
    restart: unless-stopped
    expose:
      - "5672"
      - "15672"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - cmm_network
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
      - TZ=America/Manaus
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s

  grafana:
    image: grafana/grafana:10.2.3
    container_name: GRAFANA
    restart: unless-stopped
    expose:
      - "3000"
    ports:
      - "3010:3000"
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_started
      tempo:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health || wget -q -S --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - cmm_network
    environment:
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-piechart-panel
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./Backend/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./Backend/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./Backend/grafana/dashboards:/var/lib/grafana/dashboards:ro

  loki:
    image: grafana/loki:2.9.8
    container_name: LOKI
    restart: unless-stopped
    expose:
      - "3100"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3100/ready || wget -q -S --spider http://localhost:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s
    networks:
      - cmm_network

  promtail:
    image: grafana/promtail:2.9.7
    container_name: PROMTAIL
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./Backend/promtail:/etc/promtail:ro
    command: -config.file=/etc/promtail/config.yml
    expose:
      - "9080"
    ports:
      - "9080:9080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9080/ready || wget -q -S --spider http://localhost:9080/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s
    depends_on:
      loki:
        condition: service_started
    networks:
      - cmm_network

  tempo:
    image: grafana/tempo:2.3.1
    container_name: TEMPO
    restart: unless-stopped
    expose:
      - "3200"
      - "4318"
    ports:
      - "3400:3200"
      - "4318:4318"
    networks:
      - cmm_network
    volumes:
      - ./Backend/tempo:/etc/tempo:ro
    command: -config.file=/etc/tempo/tempo.yaml
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3200/metrics || wget -q -S --spider http://localhost:3200/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: CADVISOR
    restart: unless-stopped
    expose:
      - "8080"
    ports:
      - "8800:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/metrics || wget -q -S --spider http://localhost:8080/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - cmm_network
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:1.5.1
    container_name: NGINX-EXPORTER
    restart: unless-stopped
    command: --nginx.scrape-uri=http://nginx/nginx_status
    expose:
      - "9113"
    ports:
      - "9113:9113"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9113/metrics || wget -q -S --spider http://localhost:9113/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - cmm_network
    depends_on:
      - nginx

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.18.1
    container_name: POSTGRES-EXPORTER
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://admin:admin@postgresql:5432/AUTOMACAO?sslmode=disable
    volumes:
      - ./Backend/postgresql:/etc/postgres-exporter:ro
    command: ["--extend.query-path=/etc/postgres-exporter/postgres_exporter.yml"]
    expose:
      - "9187"
    ports:
      - "9187:9187"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9187/metrics || wget -q -S --spider http://localhost:9187/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - cmm_network
    depends_on:
      - postgresql

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: REDIS-EXPORTER
    restart: unless-stopped
    expose:
      - "9121"
    ports:
      - "9121:9121"
    command: ["--redis.addr=redis://redis:6379"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9121/metrics || wget -q -S --spider http://localhost:9121/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - cmm_network
    depends_on:
      - redis

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:v1.0.0-RC7.1
    container_name: RABBITMQ-EXPORTER
    restart: unless-stopped
    expose:
      - "9419"
    ports:
      - "9419:9419"
    environment:
      - RABBITMQ_URL=http://rabbitmq:15672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=admin
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9419/metrics || wget -q -S --spider http://localhost:9419/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - cmm_network
    depends_on:
      - rabbitmq

  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: ALERTMANAGER
    restart: unless-stopped
    expose:
      - "9093"
    ports:
      - "9093:9093"
    volumes:
      - ./Backend/alertmanager:/etc/alertmanager:ro
    command: --config.file=/etc/alertmanager/alertmanager.yml
    networks:
      - cmm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9093/-/healthy || wget -q -S --spider http://localhost:9093/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s

  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: BLACKBOX
    restart: unless-stopped
    expose:
      - "9115"
    ports:
      - "9115:9115"
    volumes:
      - ./Backend/blackbox:/etc/blackbox_exporter:ro
    command: --config.file=/etc/blackbox_exporter/config.yml
    networks:
      - cmm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9115 || wget -q -S --spider http://localhost:9115 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    container_name: KEYCLOAK
    restart: unless-stopped
    command: ["start-dev"]
    expose:
      - "8080"
    ports:
      - "8081:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL_HOST=postgresql
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_USERNAME=admin
      - KC_DB_PASSWORD=admin
      - TZ=America/Manaus
    depends_on:
      postgresql:
        condition: service_started
    networks:
      - cmm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/ || wget -q -S --spider http://localhost:8080/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

  n8n:
    image: n8nio/n8n:latest
    container_name: N8N
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/Manaus
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-admin}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-dev-secret}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./Backend/N8N/Templates:/templates:ro
      - ./Backend/N8N/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh:ro
    entrypoint: ["sh", "/usr/local/bin/docker-entrypoint.sh"]
    networks:
      - cmm_network

  # RedisInsight (UI para Redis)
  redisinsight:
    image: redis/redisinsight:latest
    container_name: REDISINSIGHT
    restart: unless-stopped
    expose:
      - "5540"
    ports:
      - "5540:5540"
    networks:
      - cmm_network
    depends_on:
      redis:
        condition: service_started
    volumes:
      - redisinsight_data:/data
    environment:
      - TZ=America/Manaus
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5540/ || wget -q -S --spider http://localhost:5540/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s

  # Evolution API (porta dedicada para evitar conflito com Keycloak 8081)
  evolution-api:
    image: atendai/evolution-api:latest
    container_name: EVOLUTION_API
    restart: unless-stopped
    expose:
      - "8080"
    ports:
      - "8082:8080"
    environment:
      - TZ=America/Manaus
      - AUTHENTICATION_API_KEY=change-me
    depends_on:
      postgresql:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - cmm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/ || wget -q -S --spider http://localhost:8080/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 45s

  # Chatwoot (opcional, porta 3002)
  chatwoot:
    image: chatwoot/chatwoot:latest
    container_name: CHATWOOT
    restart: unless-stopped
    expose:
      - "3000"
    ports:
      - "3002:3000"
    environment:
      - RAILS_ENV=production
      - FRONTEND_URL=http://localhost:3002
      - REDIS_URL=redis://redis:6379
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRESQL_DATABASE=chatwoot
      - POSTGRESQL_USERNAME=admin
      - POSTGRESQL_PASSWORD=admin
      - SECRET_KEY_BASE=dev-secret
      - FORCE_SSL=false
      - ENABLE_ACCOUNT_SIGNUP=false
      - INSTALLATION_ENV=docker
      # SMTP para envio de e-mails
      - MAILER_SENDER_EMAIL=${MAILER_SENDER_EMAIL:-no-reply@itfact.com.br}
      - SMTP_ADDRESS=${SMTP_ADDRESS:-smtp.itfact.com.br}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-noreply@itfact.com.br}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-changeme}
      - SMTP_AUTHENTICATION=${SMTP_AUTHENTICATION:-login}
      - SMTP_ENABLE_STARTTLS_AUTO=${SMTP_ENABLE_STARTTLS_AUTO:-true}
      - SMTP_OPENSSL_VERIFY_MODE=${SMTP_OPENSSL_VERIFY_MODE:-none}
      - TZ=America/Manaus
    depends_on:
      postgresql:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - cmm_network
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/ || wget -q -S --spider http://localhost:3000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  tempo_data:
    driver: local
  n8n_data:
    driver: local
  redisinsight_data:
    driver: local